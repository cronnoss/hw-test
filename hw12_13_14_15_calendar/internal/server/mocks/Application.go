// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cronnoss/hw-test/hw12_13_14_15_calendar/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// DeleteEvent provides a mock function with given fields: _a0, _a1
func (_m *Application) DeleteEvent(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEvents provides a mock function with given fields: _a0, _a1
func (_m *Application) GetAllEvents(_a0 context.Context, _a1 int64) ([]model.Event, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvents")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEventsDay provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) GetAllEventsDay(_a0 context.Context, _a1 int64, _a2 time.Time) ([]model.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventsDay")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]model.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEventsMonth provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) GetAllEventsMonth(_a0 context.Context, _a1 int64, _a2 time.Time) ([]model.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventsMonth")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]model.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEventsWeek provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) GetAllEventsWeek(_a0 context.Context, _a1 int64, _a2 time.Time) ([]model.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventsWeek")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]model.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: _a0, _a1
func (_m *Application) GetEventByID(_a0 context.Context, _a1 int64) (model.Event, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertEvent provides a mock function with given fields: _a0, _a1
func (_m *Application) InsertEvent(_a0 context.Context, _a1 *model.Event) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: _a0, _a1
func (_m *Application) UpdateEvent(_a0 context.Context, _a1 *model.Event) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
