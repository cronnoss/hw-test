// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: EventService.proto

package event_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventServiceV1_InsertEvent_FullMethodName       = "/event_service_v1.EventServiceV1/InsertEvent"
	EventServiceV1_UpdateEvent_FullMethodName       = "/event_service_v1.EventServiceV1/UpdateEvent"
	EventServiceV1_DeleteEvent_FullMethodName       = "/event_service_v1.EventServiceV1/DeleteEvent"
	EventServiceV1_GetEventByID_FullMethodName      = "/event_service_v1.EventServiceV1/GetEventByID"
	EventServiceV1_GetAllEvents_FullMethodName      = "/event_service_v1.EventServiceV1/GetAllEvents"
	EventServiceV1_GetAllEventsDay_FullMethodName   = "/event_service_v1.EventServiceV1/GetAllEventsDay"
	EventServiceV1_GetAllEventsWeek_FullMethodName  = "/event_service_v1.EventServiceV1/GetAllEventsWeek"
	EventServiceV1_GetAllEventsMonth_FullMethodName = "/event_service_v1.EventServiceV1/GetAllEventsMonth"
)

// EventServiceV1Client is the client API for EventServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceV1Client interface {
	InsertEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*RepID, error)
	UpdateEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEventByID(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*RepEvents, error)
	GetAllEvents(ctx context.Context, in *ReqByUser, opts ...grpc.CallOption) (*RepEvents, error)
	GetAllEventsDay(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
	GetAllEventsWeek(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
	GetAllEventsMonth(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
}

type eventServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceV1Client(cc grpc.ClientConnInterface) EventServiceV1Client {
	return &eventServiceV1Client{cc}
}

func (c *eventServiceV1Client) InsertEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*RepID, error) {
	out := new(RepID)
	err := c.cc.Invoke(ctx, EventServiceV1_InsertEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) UpdateEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventServiceV1_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) DeleteEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventServiceV1_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetEventByID(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, EventServiceV1_GetEventByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetAllEvents(ctx context.Context, in *ReqByUser, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, EventServiceV1_GetAllEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetAllEventsDay(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, EventServiceV1_GetAllEventsDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetAllEventsWeek(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, EventServiceV1_GetAllEventsWeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetAllEventsMonth(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, EventServiceV1_GetAllEventsMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceV1Server is the server API for EventServiceV1 service.
// All implementations must embed UnimplementedEventServiceV1Server
// for forward compatibility
type EventServiceV1Server interface {
	InsertEvent(context.Context, *ReqByEvent) (*RepID, error)
	UpdateEvent(context.Context, *ReqByEvent) (*emptypb.Empty, error)
	DeleteEvent(context.Context, *ReqByID) (*emptypb.Empty, error)
	GetEventByID(context.Context, *ReqByID) (*RepEvents, error)
	GetAllEvents(context.Context, *ReqByUser) (*RepEvents, error)
	GetAllEventsDay(context.Context, *ReqByUserByDate) (*RepEvents, error)
	GetAllEventsWeek(context.Context, *ReqByUserByDate) (*RepEvents, error)
	GetAllEventsMonth(context.Context, *ReqByUserByDate) (*RepEvents, error)
	mustEmbedUnimplementedEventServiceV1Server()
}

// UnimplementedEventServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedEventServiceV1Server struct {
}

func (UnimplementedEventServiceV1Server) InsertEvent(context.Context, *ReqByEvent) (*RepID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (UnimplementedEventServiceV1Server) UpdateEvent(context.Context, *ReqByEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServiceV1Server) DeleteEvent(context.Context, *ReqByID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceV1Server) GetEventByID(context.Context, *ReqByID) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (UnimplementedEventServiceV1Server) GetAllEvents(context.Context, *ReqByUser) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (UnimplementedEventServiceV1Server) GetAllEventsDay(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEventsDay not implemented")
}
func (UnimplementedEventServiceV1Server) GetAllEventsWeek(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEventsWeek not implemented")
}
func (UnimplementedEventServiceV1Server) GetAllEventsMonth(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEventsMonth not implemented")
}
func (UnimplementedEventServiceV1Server) mustEmbedUnimplementedEventServiceV1Server() {}

// UnsafeEventServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceV1Server will
// result in compilation errors.
type UnsafeEventServiceV1Server interface {
	mustEmbedUnimplementedEventServiceV1Server()
}

func RegisterEventServiceV1Server(s grpc.ServiceRegistrar, srv EventServiceV1Server) {
	s.RegisterService(&EventServiceV1_ServiceDesc, srv)
}

func _EventServiceV1_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_InsertEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).InsertEvent(ctx, req.(*ReqByEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).UpdateEvent(ctx, req.(*ReqByEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).DeleteEvent(ctx, req.(*ReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_GetEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetEventByID(ctx, req.(*ReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_GetAllEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetAllEvents(ctx, req.(*ReqByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetAllEventsDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetAllEventsDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_GetAllEventsDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetAllEventsDay(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetAllEventsWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetAllEventsWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_GetAllEventsWeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetAllEventsWeek(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetAllEventsMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetAllEventsMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventServiceV1_GetAllEventsMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetAllEventsMonth(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

// EventServiceV1_ServiceDesc is the grpc.ServiceDesc for EventServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_service_v1.EventServiceV1",
	HandlerType: (*EventServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEvent",
			Handler:    _EventServiceV1_InsertEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventServiceV1_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventServiceV1_DeleteEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _EventServiceV1_GetEventByID_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _EventServiceV1_GetAllEvents_Handler,
		},
		{
			MethodName: "GetAllEventsDay",
			Handler:    _EventServiceV1_GetAllEventsDay_Handler,
		},
		{
			MethodName: "GetAllEventsWeek",
			Handler:    _EventServiceV1_GetAllEventsWeek_Handler,
		},
		{
			MethodName: "GetAllEventsMonth",
			Handler:    _EventServiceV1_GetAllEventsMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventService.proto",
}
